{"version":3,"sources":["Components/TodoForm.js","Components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","onSubmit","e","preventDefault","text","document","getElementById","value","_this","props","onTodoAdd","target","reset","react_default","a","createElement","className","this","bind","type","id","Component","TodoList","onDeleteClick","onTodoDelete","onCompleteClick","todo","completed","onTodoUpdate","onEditDone","input","concat","refreshInlineForms","onEditStart","parentElement","classList","remove","add","forms","getElementsByTagName","texts","i","length","_this2","todos","map","key","onDoubleClick","title","defaultValue","src","onClick","alt","axios","require","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","componentWillMount","getData","handleTodoAdd","postData","handleTodoDelete","deleteData","handleTodoUpdate","updateData","patch","then","delete","state","post","get","res","setState","data","Components_TodoForm","Components_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4f4c3372.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass TodoForm extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"TodoForm\">\r\n        <form onSubmit={this.onSubmit.bind(this)}>\r\n          <input type=\"text\" id=\"text\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n    var text = document.getElementById('text').value;\r\n    if (text) {\r\n      this.props.onTodoAdd(text);\r\n    }\r\n    e.target.reset();\r\n  }\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { Component } from 'react';\r\n\r\nclass TodoList extends Component {\r\n  render() {\r\n    var { todos } = this.props;\r\n    return (\r\n      <ul className=\"TodoList\">\r\n        {\r\n          todos.map((todo) => (\r\n            <li\r\n              className=\"list-item\"\r\n              todo={todo}\r\n              key={todo.id} >\r\n\r\n              <span\r\n                id={\"text-\" + todo.id}\r\n                className={todo.completed ? 'completed' : 'incomplete'}\r\n                onDoubleClick={this.onEditStart.bind(this, todo)}\r\n                title=\"Tap to edit\">\r\n\r\n                {todo.text}\r\n              </span>\r\n\r\n              <form\r\n                id={\"form-\" + todo.id}\r\n                className=\"hidden\"\r\n                onSubmit={this.onEditDone.bind(this, todo)}>\r\n                <input\r\n                  id={\"edit-\" + todo.id}\r\n                  type=\"text\"\r\n                  defaultValue={todo.text}\r\n                  title=\"Press enter to submit\" />\r\n              </form>\r\n\r\n              <div className=\"imgs\">\r\n                { todo.completed ?\r\n                  <img src=\"images/fill.svg\"\r\n                    onClick={this.onCompleteClick.bind(this, todo)}\r\n                    title=\"Completed\" alt=\"\"\r\n                  /> :\r\n                  <img src=\"images/empty.svg\"\r\n                    onClick={this.onCompleteClick.bind(this, todo)}\r\n                    title=\"Complete\" alt=\"\"\r\n                  />\r\n                }\r\n                <img src=\"images/garbage.svg\"\r\n                  className=\"delete-img\"\r\n                  onClick={this.onDeleteClick.bind(this, todo.id)}\r\n                  title=\"Delete Item\" alt=\"\"\r\n                />\r\n              </div>\r\n\r\n            </li>\r\n          ))\r\n        }\r\n      </ul>\r\n    );\r\n  }\r\n\r\n  onDeleteClick = (id) => {\r\n    this.props.onTodoDelete(id);\r\n  }\r\n\r\n  onCompleteClick = (todo) => {\r\n    todo.completed = !todo.completed;\r\n    this.props.onTodoUpdate(todo);\r\n  }\r\n\r\n  onEditDone = (todo, e) => {\r\n    e.preventDefault();\r\n    let { id, completed } = todo;\r\n    let input = document.getElementById(`edit-${id}`);\r\n    this.props.onTodoUpdate({id, text: input.value, completed });\r\n    this.refreshInlineForms();\r\n  }\r\n\r\n  onEditStart = (todo) => {\r\n    this.refreshInlineForms();\r\n    document.getElementById(`edit-${todo.id}`).parentElement.classList.remove('hidden');\r\n    document.getElementById(`text-${todo.id}`).classList.add('hidden');\r\n  }\r\n\r\n  refreshInlineForms = () => {\r\n    let forms = document.getElementsByTagName(\"form\");\r\n    let texts = document.getElementsByTagName(\"span\");\r\n\r\n    for(let i=1; i<forms.length; i++) {\r\n      forms[i].classList.add('hidden');\r\n      texts[i-1].classList.remove('hidden');\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { Component } from 'react';\nimport TodoForm from './Components/TodoForm';\nimport TodoList from './Components/TodoList';\nimport './App.css';\nconst axios = require('axios');\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = { todos: []};\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>To Do List</h1>\n        <TodoForm onTodoAdd={this.handleTodoAdd} />\n        <TodoList todos={this.state.todos}\n          onTodoDelete={this.handleTodoDelete}\n          onTodoUpdate={this.handleTodoUpdate}\n        />\n      </div>\n    );\n  }\n\n  componentWillMount = () => {\n    this.getData();\n  }\n\n  handleTodoAdd = (text) => {\n    this.postData(text);\n  }\n\n  handleTodoDelete = (id) => {\n    this.deleteData(id);\n  }\n\n  handleTodoUpdate  = (todo) => {\n    this.updateData(todo);\n  }\n\n  updateData = (todo) => {\n    axios.patch('http://localhost:4000/todos/' + todo.id, todo).then(() => this.getData());\n  }\n\n  deleteData = (id) => {\n    axios.delete('http://localhost:4000/todos/' + id).then(() => this.getData());\n  }\n\n  postData = (text) => {\n    let id;\n    if(this.state.todos.length > 0) {\n      id = this.state.todos[this.state.todos.length - 1].id + 1;\n    } else {\n      id = 1\n    }\n    axios.post('http://localhost:4000/todos', {\n      id: id,\n      text,\n      completed: false\n    }).then(() => this.getData());\n  }\n\n  getData = () => {\n    axios.get('http://localhost:4000/todos').then(res => this.setState({ todos: res.data  }));\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}